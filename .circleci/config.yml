---
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1
  docker-cache: nulib/docker-cache@0.3
  status_to_ms_teams: bluemarblepayroll/status_to_ms_teams_pure_bash@1.0.1
jobs:
  test:
    working_directory: ~/meadow
    docker:
      - image: circleci/elixir:1.9-node
        environment:
          DATABASE_URL: ecto://root@localhost/circle_test
          MIX_ENV: test
      - image: circleci/postgres:10-alpine
      - image: nulib/goaws
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "mix.lock" }}-{{ checksum "assets/yarn.lock" }}
      - run:
          name: Install hex & rebar
          command: mix do local.hex --force, local.rebar --force
      - run:
          name: Install Elixir Dependencies
          command: mix do deps.get, deps.compile
      - run:
          name: Install JS Dependencies
          command: yarn install
          working_directory: ~/meadow/assets
      - save_cache:
          key: dependency-cache-{{ checksum "mix.lock" }}-{{ checksum "assets/yarn.lock" }}
          paths:
            - ~/meadow/assets/node_modules
            - ~/meadow/deps
            - ~/meadow/_build
      - run:
          name: Elixir Static Analysis
          command: mix credo
      - run:
          name: Elixir Tests
          command: mix test && (mix coveralls.circle || true)
      - run:
          name: JS Static Analysis
          command: yarn prettier
          working_directory: ~/meadow/assets
      - run:
          name: JS Tests
          command: |
            export COVERALLS_SERVICE_NAME=circle-ci 
            export COVERALLS_SERVICE_JOB_ID=$CIRCLE_WORKFLOW_WORKSPACE_ID 
            yarn ci --coverageReporters=text-lcov | (yarn run coveralls ~/meadow || true)
          working_directory: ~/meadow/assets
      - run:
          name: Merge Coverage Output
          command: |
            curl -F "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID" -F "payload[status]=done" "https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN"
            true
      - run:
          name: Test Webpack Build
          command: yarn deploy
          working_directory: ~/meadow/assets
      - store_artifacts:
          path: /tmp/test-results
          destination: tests
      - status_to_ms_teams/report:
          webhook_url: $MS_TEAMS_WEBHOOK_URL
  deploy:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - docker-cache/set-deploy-tag
      - run:
          command: |
            echo "export AWS_ACCESS_KEY_ID=\$${DEPLOY_TAG}_AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=\$${DEPLOY_TAG}_AWS_SECRET_ACCESS_KEY" >> $BASH_ENV
      - aws-cli/install
      - aws-cli/setup
      - run:
          name: Update ECS service
          environment:
            APP_NAME: meadow
            ECS_CLUSTER: meadow
            ECS_SERVICE: meadow
            ECS_TASK: meadow-app
            ECS_CONTAINER: meadow-app
          command: |
            networkconfig=$(aws ecs describe-services --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} | jq -cM '.services[0].networkConfiguration')
            overrides="{\"containerOverrides\":[{\"name\":\"${ECS_CONTAINER}\",\"command\":[\"eval\",\"Meadow.ReleaseTasks.migrate()\"]}]}"
            aws ecs run-task --cluster ${ECS_CLUSTER} --task-definition ${ECS_TASK} --overrides ${overrides} --launch-type FARGATE --network-configuration ${networkconfig}
            aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment
workflows:
  ci:
    jobs:
      - test
      - docker-cache/publish:
          requires:
            - test
          filters:
            branches:
              only:
                - /^deploy\/.+/
          cache-key: docker-stages
          cache-stages: deps assets
      - deploy:
          requires:
            - docker-cache/publish
          filters:
            branches:
              only:
                - /^deploy\/.+/
