---
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1
  docker: circleci/docker@0.5.19
jobs:
  test:
    working_directory: ~/meadow
    docker:
      - image: circleci/elixir:1.9-node
        environment:
          DATABASE_URL: ecto://root@localhost/circle_test
          DB_PORT: "5432"
          MIX_ENV: test
      - image: circleci/postgres:10-alpine
        environment:
          POSTGRES_USER: docker
          POSTGRES_PASSWORD: d0ck3r
      - image: nulib/goaws
    steps:
      - checkout
      - restore_cache:
          keys:
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-
      - restore_cache:
          keys:
            - npm-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "assets/yarn.lock" }}
            - npm-cache-{{ .Environment.CACHE_PREFIX }}-
      - run:
          name: Install hex & rebar
          command: mix do local.hex --force, local.rebar --force
      - run:
          name: Install Elixir Dependencies
          command: mix do deps.get, deps.compile
      - run:
          name: Install JS Dependencies
          command: yarn install
          working_directory: ~/meadow/assets
      - save_cache:
          key: hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
          paths:
            - ~/meadow/deps
            - ~/meadow/_build
      - save_cache:
          key: npm-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "assets/yarn.lock" }}
          paths:
            - ~/meadow/assets/node_modules
      - run:
          name: Elixir Static Analysis
          command: mix credo
      - run:
          name: Elixir Tests
          command: mix test && (mix coveralls.circle || true)
      - run:
          name: JS Static Analysis
          command: yarn prettier
          working_directory: ~/meadow/assets
      - run:
          name: JS Tests
          command: |
            export COVERALLS_SERVICE_NAME=circle-ci 
            export COVERALLS_SERVICE_JOB_ID=$CIRCLE_WORKFLOW_WORKSPACE_ID 
            yarn ci --coverageReporters=text-lcov | (yarn run coveralls ~/meadow || true)
          working_directory: ~/meadow/assets
      - run:
          name: Merge Coverage Output
          command: |
            curl -F "payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID" -F "payload[status]=done" "https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN"
            true
      - run:
          name: Test Webpack Build
          command: yarn deploy
          working_directory: ~/meadow/assets
      - store_artifacts:
          path: /tmp/test-results
          destination: tests
  tarball:
    working_directory: ~/meadow
    docker:
      - image: circleci/elixir:1.9-node
    steps:
      - checkout
      - run:
          name: Set DEPLOY_TAG from branch name
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]]; then
              echo "export DEPLOY_TAG=production" >> $BASH_ENV
            else
              echo "export DEPLOY_TAG=$(echo $CIRCLE_BRANCH | awk -F/ '{print $NF}')" >> $BASH_ENV
            fi
      - restore_cache:
          keys:
            - build-cache-{{ .Environment.CACHE_PREFIX }}-{{ .Environment.DEPLOY_TAG }}
      - restore_cache:
          keys:
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "mix.lock" }}
            - hex-cache-{{ .Environment.CACHE_PREFIX }}-
      - restore_cache:
          keys:
            - npm-cache-{{ .Environment.CACHE_PREFIX }}-{{ checksum "assets/yarn.lock" }}
            - npm-cache-{{ .Environment.CACHE_PREFIX }}-
      - run:
          name: Install hex & rebar
          command: mix do local.hex --force, local.rebar --force
      - run:
          name: Build release
          command: mix release --overwrite
          environment:
            MIX_ENV: prod
      - save_cache:
          paths:
            - _build/prod
          key: build-cache-{{ .Environment.CACHE_PREFIX }}-{{ .Environment.DEPLOY_TAG }}
      - run:
          name: Log release
          command: ls -la _build/prod
workflows:
  ci:
    jobs:
      - test
      - tarball:
          requires:
            - test
          filters:
            branches:
              only:
                - /^build-.+/
                - /^deploy\/.+/
