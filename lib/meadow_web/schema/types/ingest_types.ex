defmodule MeadowWeb.Schema.IngestTypes do
  @moduledoc """
  Absinthe Schema for IngestTypes

  """
  use Absinthe.Schema.Notation

  import Absinthe.Resolution.Helpers, only: [batch: 3, dataloader: 1]
  alias Meadow.Ingest

  @desc "states: PENDING, PASS or FAIL"
  enum :state do
    value(:pending, as: "pending")
    value(:pass, as: "pass")
    value(:fail, as: "fail")
  end

  object :project do
    field :id, non_null(:id)
    field :title, non_null(:string)
    field :folder, non_null(:string)
    field :inserted_at, non_null(:naive_datetime)
    field :updated_at, non_null(:naive_datetime)

    field :ingest_sheets, list_of(:ingest_sheet), resolve: dataloader(Ingest)
  end

  @desc "IngestSheet object"
  object :ingest_sheet do
    @desc "ulid identifier for IngestSheet (autogenerated)"
    field :id, non_null(:id)
    @desc "Name of the IngestSheet"
    field :name, non_null(:string)
    @desc "Tracks file, rows and overall state of IngestSheet"
    field :state, list_of(:sheet_state)
    @desc "Location of file (ex: s3://bucket/project-123/filename.csv"
    field :filename, non_null(:string)
    field :inserted_at, non_null(:naive_datetime)
    field :updated_at, non_null(:naive_datetime)
    @desc "Project the IngestSheet Belongs to"
    field :project, :project, resolve: dataloader(Ingest)
    @desc "An array of error messages"
    field :file_errors, list_of(:string)

    field :progress, :sheet_progress,
      resolve: fn sheet, _, _ ->
        batch({MeadowWeb.Schema.Helpers, :sheet_progress, Integer}, sheet.id, fn batch_results ->
          {:ok, Map.get(batch_results, sheet.id)}
        end)
      end

    field :ingest_sheet_rows, list_of(:ingest_sheet_row), resolve: dataloader(Ingest)
  end

  object :sheet_progress do
    field :states, list_of(:state_count)
    field :total, non_null(:integer)
    field :percent_complete, non_null(:float)
  end

  @desc "Object that tracks IngestSheet state"
  object :sheet_state do
    @desc "file, rows, or overall"
    field :name, :string
    @desc "PENDING, PASS or FAIL"
    field :state, non_null(:state)
  end

  object :state_count do
    field :state, non_null(:state)
    field :count, non_null(:integer)
  end

  object :ingest_sheet_row do
    field :ingest_sheet, :ingest_sheet, resolve: dataloader(Ingest)
    field :row, non_null(:integer)
    field :fields, list_of(:field)
    field :errors, list_of(:error)
    field :state, :state
  end
end
